package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"cortei-server/internal/domain"
)

// O gqlgen vai gerar a função CreateAppointment em `generated.go` e a implementa aqui.
func (r *mutationResolver) CreateAppointment(ctx context.Context, input NewAppointmentInput) (*domain.Appointment, error) {
	newApp := &domain.Appointment{
		ClientName: input.ClientName,
		Date:       input.Date,
		Time:       input.Time,
	}

	// Call repository layer to save data
	createdApp, err := r.Repo.Create(ctx, newApp)
	if err != nil {
		return nil, err
	}

	return createdApp, nil
}

// DeleteAppointment is the resolver for the deleteAppointment field.
func (r *mutationResolver) DeleteAppointment(ctx context.Context, id string) (bool, error) {
	err := r.Repo.Delete(ctx, id)
	return err == nil, err
}

// Appointments is the resolver for the appointments field.
func (r *queryResolver) Appointments(ctx context.Context) ([]*domain.Appointment, error) {
	return r.Repo.List(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
